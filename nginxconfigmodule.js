// Generated by CoffeeScript 2.5.1
(function() {
  var c, errLog, fs, generateListenLine, generateLocationLine, generatePortServiceLocationLine, generateServerNameLine, generateSocketServiceLocationLine, generateWebsiteLocationLine, log, nginxconfigmodule, pathHandler, successLog;

  nginxconfigmodule = {
    name: "nginxconfigmodule"
  };

  //region node_modules
  fs = require("fs").promises;

  c = require("chalk");

  //endregion

  //log Switch
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["nginxconfigmodule"] != null) {
      console.log("[nginxconfigmodule]: " + arg);
    }
  };

  //region internal variables
  errLog = function(arg) {
    return console.log(c.red(arg));
  };

  successLog = function(arg) {
    return console.log(c.green(arg));
  };

  pathHandler = null;

  //endregion

  //#initialization function  -> is automatically being called!  ONLY RELY ON DOM AND VARIABLES!! NO PLUGINS NO OHTER INITIALIZATIONS!!
  nginxconfigmodule.initialize = function() {
    log("nginxconfigmodule.initialize");
    return pathHandler = allModules.pathhandlermodule;
  };

  //region internal functions
  generateListenLine = function(thingy) {
    var result;
    log("generateListenLine");
    result = "";
    if (thingy.outsidePort) {
      result += "    listen " + thingy.outsidePort + ";\n";
    } else {
      result += "    listen 80;\n";
      result += "    listen [::]:80;\n";
    }
    result += "\n";
    return result;
  };

  generateServerNameLine = function(thingy) {
    var i, len, name, ref, result;
    log("generateServerNameLine");
    result = "";
    if ((thingy.dnsNames != null) && thingy.dnsNames.length > 0) {
      result += "    server_name";
      ref = thingy.dnsNames;
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        result += " " + name;
      }
      result += ";\n\n";
    }
    return result;
  };

  generateLocationLine = function(thingy) {
    var result;
    log("generateLocationLine");
    result = "";
    if (thingy.type === "website") {
      result += generateWebsiteLocationLine(thingy);
    } else if (thingy.type === "service") {
      if (thingy.socket) {
        result += generateSocketServiceLocationLine(thingy);
      } else if (thingy.port) {
        result += generatePortServiceLocationLine(thingy);
      } else {
        throw new Error("Service has neither port nor socket defined!");
      }
    }
    return result;
  };

  generateWebsiteLocationLine = function(thingy) {
    var result;
    log("generateWebsiteLocationLine");
    if (!thingy.homeUser) {
      throw new Error("No homeUser was defined!");
    }
    result = "";
    result += "    location / {\n";
    if (!thingy.searchIndexing) {
      result += '        add_header  X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";\n';
    }
    result += "        root /srv/http/" + thingy.homeUser + ";\n";
    result += "        index index.html;\n";
    result += "    }\n\n";
    return result;
  };

  generatePortServiceLocationLine = function(thingy) {
    var result;
    log("generatePortServiceLocationLine");
    if (!thingy.port) {
      throw new Error("No port was defined!");
    }
    result = "";
    result += "    location / {\n";
    if (!thingy.searchIndexing) {
      result += '        add_header  X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";\n';
    }
    result += "        proxy_pass http://localhost:" + thingy.port + ";\n";
    result += "    }\n\n";
    return result;
  };

  generateSocketServiceLocationLine = function(thingy) {
    var result;
    log("generateSocketServiceLocationLine");
    if (!thingy.homeUser) {
      throw new Error("No homeUser was defined!");
    }
    result = "";
    result += "    location / {\n";
    if (!thingy.searchIndexing) {
      result += '        add_header  X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";\n';
    }
    result += "        proxy_pass http://unix:/run/" + thingy.homeUser + ".sk;\n";
    result += "    }\n\n";
    return result;
  };

  //endregion

  //region exposed functions
  nginxconfigmodule.generateForThingy = async function(thingy) {
    var configPath, configString, err, errorMessage;
    log("nginxconfigmodule.generateForThingy");
    // log "\n" + JSON.stringify(thingy, null, 2)
    if (thingy.type !== "service" && thingy.type !== "website") {
      return;
    }
    try {
      configString = "server {\n";
      configString += generateListenLine(thingy);
      configString += generateServerNameLine(thingy);
      configString += generateLocationLine(thingy);
      configString += "}\n";
      configPath = pathHandler.getConfigOutputPath(thingy.homeUser);
      log("write to: " + configPath);
      await fs.writeFile(configPath, configString);
      return successLog(thingy.homeUser + " - nginx-config generated");
    } catch (error) {
      err = error;
      errorMessage = thingy.homeUser + " - could not generate nginx-config";
      errorMessage += "\nReason: " + err;
      return errLog(errorMessage);
    }
  };

  //endregion
  module.exports = nginxconfigmodule;

}).call(this);
